# Copyright (c) 2001-2021 Convertigo SA.
# 
# This program  is free software; you  can redistribute it and/or
# Modify  it  under the  terms of the  GNU  Affero General Public
# License  as published by  the Free Software Foundation;  either
# version  3  of  the  License,  or  (at your option)  any  later
# version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS  FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program;
# if not, see <http://www.gnu.org/licenses/>.

display_name=HTML transaction
short_description=Defines an HTML transaction. | As regards web applications, Convertigo's basic principle is to:\
<br/><br/>\
 \u2022 connect to websites, <br/>\
 \u2022 detect defined screen classes and navigate through web pages,<br/>\
 \u2022 extract web page data using screen class-specific extraction rules,<br/>\
 \u2022 treat extracted data in order to generate an XML document structured as required.<br/>\
<br/>\
This process defines the notion of <i>HTML transaction</i>. <br/>\
<i>HTML transactions</i> are based on input variables, as other transactions. They execute actions that are programmed using event handlers and statements, they are designed to handle web pages navigation. <i>HTML Transactions</i> return data in an XML structure resulting from automated navigation on the target website and extraction rules execution on these pages or, in the case of <i>Web Clipper</i> extraction rule, clip required HTML parts of the web pages.<br/>\
A Convertigo project can contain several <i>HTML transactions</i>, each of them being exposed as standard REST or SOAP web service method.
property.stateFull.display_name=Maintains connector state
property.stateFull.short_description=Defines whether the connector state must be maintained between transactions. | If set to <span class="computer">false</span> (default value), each time the transaction is executed, it connects the connector browser to the target web page specified in the <b>Sub path</b> property using the <b>HTTP headers</b> property for headers, and the <b>Synchronization</b> property to synchronize on the accessed page.<br/>\
If set to <span class="computer">true</span>, the transaction maintains the connector state, i.e. uses the browser in the state in which it has been left when the preceding transaction ended. 
property.trigger.display_name=Synchronization
property.trigger.short_description=Defines how to synchronize the transaction. | HTML transactions can connect automatically (without using any specific statement) to a target web page (see the <b>Maintain connector state</b> property). This property allows to specify which type of synchronizer is used in the connection process.<br/>\
A synchronizer states how and when accessed pages are considered fully loaded. Only then are data extracted and new pages re-detected. <br/>\
There are several types of synchronizers, that are described hereafter:\
<br/><br/>\
 \u2022 <span class="computer">Document completed</span>: The synchronizer waits for a number of documents to be completed. Specify here how many "document completed" events Convertigo has to wait for before assuming that the page is complete. \
In many cases, when the target application uses HTTP META redirects or JavaScript redirects, the document is loaded several times. You can monitor <br/>\
<span class="computer">==== start parse ======</span><br/>\
and<br/>\
<span class="computer">==== Parse end ==(XXXms )====================</span><br/>\
traces in the Engine console (debug mode) to count the number of "document completed" events needed for the synchronizer. \
The <span class="computer">Document completed</span> synchronizer can be configured to also stop on alert messages that could pop up. Alert messages do not trigger a "document completed" event and are not detected by this synchronizer. To activate this option, check the <b>Stop on alert</b> checkbox. <br/>\
 \u2022 <span class="computer">XPath</span>: The synchronizer waits until a specified XPath is found. Convertigo tries to evaluate the specified XPath while receiving a web page or executing JavaScript in it. Once the XPath matches at least one node of the page, the synchronizer returns. <br/>\
 \u2022 <span class="computer">Wait time</span>: The synchronizer waits until a specified time is reached (in ms, set via the <b>Timeout</b> property). <br/>\
 \u2022 <span class="computer">Screen Class</span>: The synchronizer waits for one of the selected screen classes to be detected. Several screen classes can be selected to be waited for. The synchronizer returns when one of them is reached. <br/>\
 \u2022 <span class="computer">Download started</span>: The synchronizer waits for a download request. This is the perfect synchronizer to use before a <b>Get attachment</b> statement. <br/>\
 \u2022 <span class="computer">No wait</span>: The synchronizer doesn't wait and execution proceeds directly. <br/>\
<br/>\
For all synchronizer types, the maximum waiting time is set using the <b>Timeout</b> property.
property.subDir.display_name=Sub path
property.subDir.short_description=Defines the end of the path to use for connecting to the target web page. | <i>HTML transaction</i> can connect automatically to a target web page without using a specific statement (see the <b>Maintain connector state</b> property). The <b>Sub path</b> property allows to define the sub path, relative to the connector root path, to connect to the target web page URI.<br/>\
For example, if the target is: <span class="computer">http://server/MyApp/targetpage.jsp</span>, the connector server would be: <span class="computer">server</span>, the connector root path: <span class="computer">/MyApp</span> and the transaction sub path: <span class="computer">/targetpage.jsp</span>.
property.httpParameters.display_name=HTTP headers
property.httpParameters.short_description=Defines HTTP headers to be sent. | <i>HTML transaction</i> can connect automatically to a target web page without using a specific statement (see the <b>Maintain connector state</b> property). The <b>HTTP headers</b> property allows to define the request Header Fields to be sent with the request to connect to the target web page. <br/>\
For each header, two colums have to be parametered:\
<br/><br/>\
 \u2022 <b>Variable</b>: HTTP header name (ex: <span class="computer">Content-Type</span>).<br/>\
 \u2022 <b>Value</b>: HTTP header value (ex: <span class="computer">application/x-www-from-urlencoded</span>). <br/>
